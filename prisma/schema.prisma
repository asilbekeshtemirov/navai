// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?        // Optional name field
  role          UserRole       @default(USER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  apiKeys       ApiKey[]
  chatMessages  ChatMessage[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  keyHash    String    @unique
  keyPrefix  String    @unique
  userId     String
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastUsedAt DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Upload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  s3Key        String   @unique
  s3Bucket     String
  userId       String?
  createdAt    DateTime @default(now())

  @@map("uploads")
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String
  plan      String
  status    String
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("subscriptions")
}

model ChatMessage {
  id               String   @id @default(cuid())
  userId           String
  message          String
  response         String
  type             String
  audioUrl         String?
  responseAudioUrl String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  PREMIUM
  USER
  GUEST
}